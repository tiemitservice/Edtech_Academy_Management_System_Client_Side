<template>
    <section class="px-4 mx-auto">
        <!-- <p class="mt-1 text-lg text-gray-800">Staff list</p> -->
        <!-- <pre>
            {{ student }}
        </pre> -->
        <div class="py-2 flex flex-col md:flex-row mt-6 mb-4 gap-4 bg-white dark:bg-gray-800 p-4 items-center rounded-lg justify-between">
            <label class="text-lg font-medium text-gray-800 dark:text-white">Student payments</label>
            <div class="flex items-center gap-4">
                <IconField>
                    <InputIcon class="pi pi-search" />
                    <InputText placeholder="Search by name" v-model="searchQuery" class="w-full" />
                </IconField>
                <Select v-model="selectedBookCategory" :options="student" :filter="true" option-value="_id" option-label="name" show-clear placeholder="Select a category" class="min-w-[180px]" />
                <Button @click="filterData()" label="Apply filter" />

                <Button @click="openModal" label="Add new" />
            </div>
        </div>

        <div class="flex flex-col" v-if="data">
            <div class="overflow-x-auto">
                <div class="py-2" v-if="!loading && data.length > 0">
                    <DataTable v-if="data" :value="data" :paginator="true" :rows="10" :rowsPerPageOptions="[5, 10, 25]">
                        <Column field="_id" header="No" sortable style="min-width: 150px">
                            <template #body="slotProps">
                                <p class="font-medium">{{ slotProps.index + 1 }}</p>
                            </template>
                        </Column>

                        <!-- start data -->
                        <Column field="name" header="Name" sortable style="min-width: 200px">
                            <template #body="slotProps">
                                <div class="inline px-3 py-1 text-lg font-semibold text-nowrap">{{ slotProps.data?.eng_name }}</div>
                            </template>
                        </Column>

                        <Column field="payment_date" header="Payment Date" sortable style="min-width: 200px">
                            <template #body="slotProps">
                                <div class="inline px-3 py-1 text-lg font-semibold text-nowrap">{{ slotProps.data?.payment_date ?? 'N/A' }}</div>
                            </template>
                        </Column>
                        <Column field="payment_type" header="Next Payment Date" sortable style="min-width: 200px">
                            <template #body="slotProps">
                                <div class="inline px-3 py-1 text-lg font-semibold text-nowrap">
                                    {{ getNextPaymentDate(slotProps.data.payment_date, slotProps.data?.payment_type) ? getNextPaymentDate(slotProps.data.payment_date, slotProps.data?.payment_type) : 'N/A' }}
                                </div>
                            </template>
                        </Column>
                        <Column field="payment_type" header="Payment Type" sortable style="min-width: 200px">
                            <template #body="slotProps">
                                <div class="inline px-3 py-1 text-lg font-semibold text-nowrap">{{ slotProps.data?.payment_type ?? 'N/A' }}</div>
                            </template>
                        </Column>

                        <Column header="Actions" style="min-width: 150px">
                            <template #body="slotProps">
                                <div class="flex space-x-2">
                                    <Button icon="pi pi-pencil" severity="warn" rounded aria-label="Edit" @click="handleEdit(slotProps.data)" />
                                    <Button @click="handleDeleteConfirm(slotProps.data._id, slotProps.data)" icon="pi pi-trash" severity="danger" rounded aria-label="Delete" />
                                </div>
                            </template>
                        </Column>
                    </DataTable>
                </div>
                <div v-else-if="!loading && data.length === 0 && hasFiltered">
                    <NotFound />
                </div>
                <div v-else>
                    <Laoding />
                </div>
            </div>
        </div>

        <TransitionRoot appear :show="isOpen" as="template">
            <Dialog as="div" @close="closeModal" class="relative z-[99]">
                <TransitionChild as="template" enter="duration-300 ease-out" enter-from="opacity-0" enter-to="opacity-100" leave="duration-200 ease-in" leave-from="opacity-100" leave-to="opacity-0">
                    <div class="fixed inset-0 bg-black/25" />
                </TransitionChild>

                <div class="fixed inset-0 overflow-y-auto">
                    <div class="flex min-h-full items-start justify-center p-4 text-center">
                        <TransitionChild as="template" enter="duration-300 ease-out" enter-from="opacity-0 scale-95" enter-to="opacity-100 scale-100" leave="duration-200 ease-in" leave-from="opacity-100 scale-100" leave-to="opacity-0 scale-95">
                            <DialogPanel class="w-fit transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 shadow-xl transition-all">
                                <div class="mt-2">
                                    <StudentsMarkPayment :datatoedit="datatoedit" @close="handleClose" @toast="showToast" />
                                </div>
                            </DialogPanel>
                        </TransitionChild>
                    </div>
                </div>
            </Dialog>
        </TransitionRoot>

        <TransitionRoot appear :show="isDelete" as="template">
            <Dialog as="div" @close="handleCloseDelete" class="relative z-[99]">
                <TransitionChild as="template" enter="duration-300 ease-out" enter-from="opacity-0" enter-to="opacity-100" leave="duration-200 ease-in" leave-from="opacity-100" leave-to="opacity-0">
                    <div class="fixed inset-0 bg-black/25" />
                </TransitionChild>

                <div class="fixed inset-0 overflow-y-auto">
                    <div class="flex min-h-full items-start justify-center p-4 text-center">
                        <TransitionChild as="template" enter="duration-300 ease-out" enter-from="opacity-0 scale-95" enter-to="opacity-100 scale-100" leave="duration-200 ease-in" leave-from="opacity-100 scale-100" leave-to="opacity-0 scale-95">
                            <DialogPanel class="w-fit transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all">
                                <div class="mt-2">
                                    <DeleteConfimation :deleteData="deleteData" :datatoedit="datatoedit" :collection="collection" @close="handleCloseDelete" @toast="showToast" />
                                </div>
                            </DialogPanel>
                        </TransitionChild>
                    </div>
                </div>
            </Dialog>
        </TransitionRoot>
        <Toast position="top-right" />
    </section>
</template>

<script setup>
import { ref, onMounted, watch } from 'vue';
import { useFetch } from '../composible/useFetch';
import { TransitionRoot, TransitionChild, Dialog, DialogPanel } from '@headlessui/vue';
import DeleteConfimation from '@/form/DeleteConfimation.vue';
import StudentsMarkPayment from '@/form/StudentsMarkPayment.vue';
import NotFound from './pages/NotFound.vue';
import Laoding from './pages/Laoding.vue';
import { useToast } from 'primevue/usetoast';
import moment from 'moment';

import { formatDate2 } from '@/composible/formatDate';
const collection = ref('students');
const { data: rawData, loading, error, fetchData } = useFetch(collection.value);
const { data: student, fetchData: fetchBookCategories } = useFetch('students');
const getNextPaymentDate = (paymentDate, paymentType) => {
    const date = moment(paymentDate, 'YYYY-MM-DD');
    if (!date.isValid())
        switch (paymentType) {
            case 'Monthly':
                return date.add(1, 'month').format('YYYY-MM-DD');
            case 'Quarter':
                return date.add(3, 'months').format('YYYY-MM-DD');
            default:
                return '-';
        }
};
const isOpen = ref(false);
const datatoedit = ref(null);

const toast = useToast();
const showToast = (action, severity) => {
    let summary;
    switch (action) {
        case 'create':
            severity = 'success';
            summary = ' Created Success';
            break;
        case 'update':
            severity = 'info';
            summary = ' Updated Success';
            break;
        case 'delete':
            summary = ' Deleted Success';
            break;
        case 'asociate':
            severity = 'warn';
            summary = ' Please delete the associated data first';
            break;
        default:
            severity = 'info';
            summary = 'Action Completed';
    }

    toast.add({
        severity: severity,
        summary: summary,
        life: 3000
    });
};

const data = ref([]);
const searchQuery = ref('');
const selectedBookCategory = ref(null);
const hasFiltered = ref(false);

const filterData = () => {
    loading.value = false;
    hasFiltered.value = false;
    setTimeout(() => {
        const q = (searchQuery.value || '').trim().toLowerCase();

        data.value =
            rawData.value?.filter((item) => {
                const matchesName = !q || item.name?.toLowerCase().includes(q);
                const matchesBookCategory = !selectedBookCategory.value || item.bookType === selectedBookCategory.value;
                return matchesName && matchesBookCategory;
            }) || [];

        console.log('Filtered data:', data.value);
        loading.value = false;
        hasFiltered.value = true;
    }, 500);
};

// Watch search query changes
watch(searchQuery, () => {
    console.log('Search input changed');
    filterData();
});
watch(
    rawData,
    () => {
        console.log('rawData updated:', rawData.value);
        filterData();
    },
    { deep: true }
);

const isDelete = ref(false);
const deleteData = ref(null);
const handleDeleteConfirm = async (id, doc) => {
    deleteData.value = id;
    isDelete.value = true;
    datatoedit.value = doc;
};
const handleCloseDelete = async () => {
    isDelete.value = false;
    deleteData.value = null;
    await fetchData();
};
const handleEdit = (data) => {
    datatoedit.value = data;
    openModal();
};
const handleClose = () => {
    isOpen.value = false;
    datatoedit.value = null;
};
function closeModal() {
    isOpen.value = false;
    datatoedit.value = null;
}
function openModal() {
    isOpen.value = true;
}

onMounted(async () => {
    await fetchData();
    await fetchBookCategories();
    filterData();
});
</script>
